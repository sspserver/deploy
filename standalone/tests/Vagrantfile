def is_arm64()
  `uname -m` == "arm64" || `/usr/bin/arch -64 sh -c "sysctl -in sysctl.proc_translated"`.strip() == "0"
end

Vagrant.configure("2") do |config|
  # Define an array of Debian versions
  debian_versions = is_arm64() ?
    ["bento/debian-11", "bento/debian-12"] :
    ["bento/debian-11", "bento/debian-12"]

  debian_versions.each_with_index do |box, index|
    config.vm.define "test-#{index + 11}" do |vm_config|
      vm_config.vm.box = box  # Use the respective Debian version

      # Network settings
      vm_config.vm.network "private_network", type: "dhcp"

      # Sync local folder to the VM (for install.sh script)
      vm_config.vm.synced_folder ".", "/vagrant", type: "rsync"

      # Set minimal memory and CPU
      vm_config.vm.provider "virtualbox" do |vb|
        vb.memory = 4096
        vb.cpus = 2
      end

      # Set minimal memory and CPU
      config.vm.provider "libvirt" do |v|
        v.memory = 4096
        v.cpus = 2
      end

      # # Enable GUI for VirtualBox
      # config.vm.provider "virtualbox" do |vb|
      #   vb.gui = true
      # end

      # Provision to run install.sh script
      vm_config.vm.provision "shell", inline: <<-SHELL
        echo "Running install.sh on #{box}..."
        chmod +x /vagrant/install.sh
        /vagrant/install.sh
        echo "install.sh completed on #{box}."
      SHELL

      # Automatically destroy the VM after provisioning
      vm_config.vm.provision "shell", inline: <<-SHELL
        echo "Destroying VM for #{box}..."
        sleep 2
        sudo poweroff
      SHELL
    end
  end

  # Automatically destroy VMs after `vagrant up` completes
  # config.trigger.after :up do
  #   system("vagrant destroy -f")
  # end
end